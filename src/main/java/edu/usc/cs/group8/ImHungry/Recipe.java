package edu.usc.cs.group8.ImHungry;
import java.io.Serializable;
import java.util.ArrayList;

/*
 * Recipe.java
 * The container for information parsed by RecipeGetter to be passed into the front end.
 * Author: Kevin Calaway
 * USC ID: 9724507315
 * Email: calaway@usc.edu
 */
public class Recipe extends Result implements Serializable{

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/*
	 * This is the raw information that will be parsed from the Json
	 * (see RecipeGetter)
	 */
	private String prepTimeText;
	private String cookTimeText;
	private String imgURL;
	private ArrayList<String> ingredients;
	private ArrayList<String> instructions;
	
	/*
	 * These will be calculated as we go along from the raw data
	 */
	private int prepTimeInt;
	private int cookTimeInt;
	
	/*
	 * It is assumed that the Json provides all information
	 * (see RecipeGetter)
	 */
	public Recipe(String name, String prepTime, String cookTime, String imgURL, ArrayList<String> ingredients, ArrayList<String> instructions) {
		super.setName(name);
		this.prepTimeText = prepTime;
		this.cookTimeText = cookTime;
		this.imgURL = imgURL;
		this.ingredients = ingredients;
		this.instructions = instructions;
		prepTimeInt = parsePrepTime(prepTimeText);
		cookTimeInt = parsePrepTime(cookTimeText);
	}
	
	/*
	 * Google's standard recipe format asks that recipes be given
	 * prep time and cook time in ISO 8601. As it is unlikely that any
	 * dish requires a week or more of prep time, only days through minutes
	 * are calculated. This also solves the ambiguity of "M" for month vs.
	 * "M" for minute. Some recipe authors misbehave, and so there is also
	 * an initial check for just a raw number. If such exists, we use that.
	 * Otherwise, we parse according to ISO.
	 */
	private int parsePrepTime(String text) {
		int parsedValue = 0;
		try {
			parsedValue = Integer.parseInt(text);
		} catch (Exception e) {
			try {
				parsedValue = 0;
				for (int i = 0; i < text.length(); i++) {
					if (text.charAt(i) < '0' || text.charAt(i) > '9') {
						continue;
					}
					int j = i;
					while (text.charAt(j) >= '0' && text.charAt(j) <= '9') {
						j++;
					}
					int factor = -1;
					switch (text.charAt(j)) {
						case 'D':
							factor = 1440;
							break;
						case 'H':
							factor = 60;
							break;
						case 'M':
							factor = 1;
							break;
						default:
							factor = 0;
							break;
					}
					parsedValue += Integer.parseInt(text.substring(i, j)) * factor;
					i = j;
				}
			} catch (Exception f) {
				parsedValue = 0;
			}
		}
		return parsedValue;
	}

	public int getPrepTime() {
		return prepTimeInt;
	}

	public void setPrepTime(String prepTime) {
		this.prepTimeText = prepTime;
		prepTimeInt = parsePrepTime(prepTimeText);
	}

	public int getCookTime() {
		return cookTimeInt;
	}

	public void setCookTime(String cookTime) {
		this.cookTimeText = cookTime;
		cookTimeInt = parsePrepTime(cookTimeText);
	}

	public String getImgURL() {
		return imgURL;
	}

	public void setImgURL(String imgURL) {
		this.imgURL = imgURL;
	}

	public ArrayList<String> getIngredients() {
		return ingredients;
	}

	public void setIngredients(ArrayList<String> ingredients) {
		this.ingredients = ingredients;
	}

	public ArrayList<String> getInstructions() {
		return instructions;
	}

	public void setInstructions(ArrayList<String> instructions) {
		this.instructions = instructions;
	}
	
	public String toString() {
		return super.getName() + "\n" + prepTimeInt + "\n" + cookTimeInt + "\n" + ingredients + "\n" + instructions + "\n";
	}

	/*
	 * These are autogenerated hashCode and equals methods for use in comparators
	 * and identifying list elements.
	 */
 
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Recipe other = (Recipe) obj;
		if (cookTimeInt != other.cookTimeInt)
			return false;
		if (imgURL == null) {
			if (other.imgURL != null)
				return false;
		} else if (!imgURL.equals(other.imgURL))
			return false;
		if (ingredients == null) {
			if (other.ingredients != null)
				return false;
		} else if (!ingredients.equals(other.ingredients))
			return false;
		if (instructions == null) {
			if (other.instructions != null)
				return false;
		} else if (!instructions.equals(other.instructions))
			return false;
		if (cookTimeInt != other.cookTimeInt)
			return false;
		return true;
	}
	
	
}
